#pragma once
#include<iostream>
#include<string>
#include"conio.h"
#include"windows.h"
#include<fstream>
#include<stdlib.h>
#include"time.h";
#include<vector>
using namespace std;
//定义变量
string map[50][50];
int fruit = 0;
bool dead = false;
int speed = 100;
char result;
char 真实朝向;
char 输入朝向;
vector<int>X;
vector<int>Y;


//地图显示
void 地图显示() {
	int m = 0;
	for (int m = 1; m <= 45; m++)
	{
		cout << map[0][m];
	}
	for (int m = 1; m <=21; m++) {
		cout << map[0][m];
		for (int b = 1; b <= 22; b++)
		{
			
			cout << map[b][m] << " ";
			
		}
		cout << map[m][0]<< endl;
	}
	for (int m = 1; m <= 45; m++)
	{
		cout << map[23][m];
	}
};
//跟踪
void 跟踪()
{
	
	 for (int m = X.size()-2; m >= 0; m--)
	 {
		 X[m+1] = X[m];
		 Y[m + 1] = Y[m];
	 }
};

//移动
void 移动(char m_朝向) {
	
	void 随机果实();
	
	if (m_朝向 == 'w')
	{
		
		if (map[X.at(0)][Y.at(0)-1] == "B")
		{
			随机果实();
			fruit++;
			X.push_back(X.back());
			Y.push_back(Y.back());
			if(speed>20)
			{
				speed = speed - 5;
			}
			
		};
		if (map[X.at(0)][Y.at(0) - 1] == "#")
		{
			 dead = true;
		};
		if (map[X.at(0)][Y.at(0) - 1] == "$")
		{
			dead = true;


		};
		跟踪();
		Y.at(0) = Y.at(0) - 1;
		
	}
	else if (m_朝向 == 'a')
	{
		
		
		if (map[X.at(0)-1][Y.at(0)] == "B")
		{
			随机果实();
			fruit++;
			X.push_back(X.back());
			Y.push_back(Y.back());
			if (speed > 20)
			{
				speed = speed - 5;
			}
		};
		if (map[X.at(0) - 1][Y.at(0)] == "#")
		{
			 dead = true;


		};
		if (map[X.at(0)-1][Y.at(0)] == "$")
		{
			dead = true;


		};
		跟踪();
		X.at(0) = X.at(0) - 1;
		
	}
	else if (m_朝向 == 'd')
	{
		
		
		if (map[X.at(0) + 1][Y.at(0)] == "B")
		{
			随机果实();
			fruit++;
			X.push_back(X.back());
			Y.push_back(Y.back());
			if (speed > 20)
			{
				speed = speed - 5;
			}
		};
		if (map[X.at(0) + 1][Y.at(0)] == "#")
		{
			 dead = true;


		};
		if (map[X.at(0)+1][Y.at(0)] == "$")
		{
			dead = true;


		};
		跟踪();
		X.at(0) = X.at(0) + 1;
		
	}
	else if (m_朝向 == 's')
	{
		
		if (map[X.at(0)][Y.at(0) + 1] == "B")
		{
			随机果实();
			fruit++;
			X.push_back(X.back());
			Y.push_back(Y.back());
			if (speed > 20)
			{
				speed = speed - 5;
			}
		};
		if (map[X.at(0)][Y.at(0) + 1] == "#")
		{
			 dead = true;


		};
		if (map[X.at(0)][Y.at(0) + 1] == "$")
		{
			dead = true;


		};
		跟踪();
		Y.at(0) = Y.at(0) + 1;
		
	}
	else { cout << "无效指令"; };
	
	
	return ;

	
};

//随机果实
void 随机果实()
{    START:
	srand(time(0));
	int X;
	int Y;
	X = rand() % 20 + 2;
	Y = rand() % 20 + 2;
	while (map[X][Y] !=  "$" )
	{
		map[X][Y] = { "B" };
		break;
	}
	if (map[X][Y] == "$") { goto START; }
	SetConsoleTextAttribute(GetStdHandle(STD_OUTPUT_HANDLE), FOREGROUND_INTENSITY | FOREGROUND_GREEN);
};
void 输入判断(char m_朝向)
{
	if (m_朝向 == 'a'&&真实朝向 == 'd')
	{
		return;
	}
	else if (m_朝向 == 'd'&&真实朝向 == 'a')
	{
		return;
	}
	else if (m_朝向 == 'w'&&真实朝向 == 's')
	{
		return;
	}
	else if (m_朝向 == 's'&&真实朝向 == 'w')
	{
		return;
	}
	else
	{
		真实朝向 = m_朝向;
	}
}
void 检查()
{
	int m;

	for (int X轴 = 1; X轴 < 20; X轴++) {
		for (int Y轴 = 1; Y轴 < 20; Y轴++) {
			if (map[X轴][Y轴] == "B") { m = 1; };
		}
		}
		if (m == 1) { 随机果实(); };
		m = 0;
	};

//游戏本体框架
void 游戏本体()
{
	
	
	printf("开始游戏");
	cin >> 真实朝向;
	随机果实();
	//游戏开始
	while (dead == false)
	{
		
		地图显示();
		printf("输入朝向\n");
		printf("完成度:%d", fruit);
		if (_kbhit())
		{
			输入朝向 = _getch();

		};
		map[X.back()][Y.back()] = " ";
		输入判断(输入朝向);
		移动(真实朝向);
		for (int m = 0; m < X.size(); m++)
                                {
			map[X.at(m)][Y.at(m)] = "$";
		}
		cout << 输入朝向 << 真实朝向 << endl;
		cout << dead << endl;
		cout << "速度:"<<speed << endl;
		cout << "X容器空间" << X.size() << endl;
		cout << "Y容器空间" << Y.size() << endl;
		cout << X.at(0) << " "<<Y.at(0)<<" "<<X.at(1)<<" "<<Y.at(1)<<" "<<X.at(2) <<" "<<Y.at(2) <<endl;
		Sleep(speed);
		
		system("cls");
		if(dead==true)
		{
			goto END;
		}
	};
	END:
	return;

}